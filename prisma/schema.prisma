generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  COMING_SOON
}

enum VariantStatus {
  ACTIVE
  SOLD_OUT
  DISABLED
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  password String
  role      Role      @default(CUSTOMER)

  userDetails userDetails?
  orders   Order[]
  reviews  Review[]
  cart     Cart?
  wishlists Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userDetails {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  name      String
  address   String?
  phone     String?
  gender    String?
  dateOfBirth DateTime?

  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  metaTitle       String?
  metaDescription String?
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  categoryId Int?
  status ProductStatus @default(ACTIVE)
  targetAudience String?
  published Boolean @default(false)
  slug String @unique
  featured   Boolean @default(false)

  productImages ProductImage[]
  OrderItems  OrderItem[]
  CartItems   CartItem[]
  reviews Review[]
  productVariants ProductVariant[]
  category   Category? @relation(fields: [categoryId], references: [id])
  wishlists Wishlist[]
  inventoryLogs InventoryLog[]
  tags Tag[] @relation("ProductTags")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  size      String?
  color     String?
  stock     Int     @default(0)
  price     Float
  status VariantStatus? // Optional, but helps prevent typos

variantImages VariantImage[]
  product   Product @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  altText   String?
  position Int @default(0)

  product   Product @relation(fields: [productId], references: [id])
}

model VariantImage {
  id         Int     @id @default(autoincrement())
  variantId  Int
  url        String
  altText    String?
  position Int @default(0)

  variant    ProductVariant @relation(fields: [variantId], references: [id])
}


model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}


model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int         @unique
  user      User       @relation(fields: [userId], references: [id])
  
  items     CartItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}


model Order {
  id         Int        @id @default(autoincrement())
  userId     Int
  total      Float
  shippingAddress String
  trackingNumber String?
  status     String     @default("pending") // pending, paid, shipped, delivered, cancelled
  user       User       @relation(fields: [userId], references: [id])
  
  orderItems OrderItem[]
  payment    Payment?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int     @unique
  amount    Float
  method    String   // "credit_card", "paypal", "gcash", etc.
  status    String   // "pending", "paid", "failed"
  
  order     Order    @relation(fields: [orderId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  slug   String @unique
  products Product[] @relation("ProductTags")
}

// ADMIN
model InventoryLog {
  id        Int      @id @default(autoincrement())
  productId Int
  change    Int
  reason    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}